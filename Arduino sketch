
//The code in this sketch is an amalgamation of several sketches found on the interwebs.

/* YourDuino.com Example Software Sketch
 IR Remote Kit Test
 Uses YourDuino.com IR Infrared Remote Control Kit 2
 http://arduino-direct.com/sunshop/index.php?l=product_detail&p=153
 based on code by Ken Shirriff - http://arcfn.com
 Get Library at: https://github.com/shirriff/Arduino-IRremote
 Unzip folder into Libraries. RENAME folder IRremote
 terry@yourduino.com */

/*-----( Import needed libraries )-----*/

#include "IRremote.h"
#include <Adafruit_NeoPixel.h>
#define NUM_PIXELS 24
Adafruit_NeoPixel strip = Adafruit_NeoPixel(24, 6, NEO_GRB + NEO_KHZ800);

/*-----( Declare Constants )-----*/

//signal pin for ir emitter is pin 3
int speakerPin = 4;               //Piezo style audio output
int firePin = 2;                  //Primary IR fire button
int blasterLed = 5;                //Power pin for Led in blaster
int audioPin1 = 8;                //For triggering external sound modules
int audioPin2 = 9;                //
int audioPin3 = 10;               //
/*-----( Declare objects )-----*/

IRsend irsend;

/*-----( Declare Variables )-----*/

void setup()   /*----( SETUP: RUNS ONCE )----*/
{

  pinMode(blasterLed, OUTPUT);
  pinMode(firePin, INPUT);  
  pinMode(speakerPin, OUTPUT);
  pinMode(audioPin1, OUTPUT);
  pinMode(audioPin2, OUTPUT);
  pinMode(audioPin3, OUTPUT);

  Serial.begin(9600);
  
  

  Serial.println("Welcome to the Infinite Void!");

  {
    strip.begin();
    strip.show(); // Initialize all pixels to 'off'
  }

  for (int i = 1;i < 254;i++)
    playTone((2500-9*i), 3);

}

/*--(end setup )---*/

void loop() /*----( LOOP: RUNS CONSTANTLY )----*/

{

  int buttonstate = digitalRead(firePin);
  Serial.println (buttonstate);
  delay(1);


  if (buttonstate == 1)
  {
    digitalWrite(audioPin3, HIGH);
    delay(100);
    Serial.println (" Charging... ");

    digitalWrite(audioPin1, LOW);
    delay(100);
    digitalWrite(audioPin1, HIGH);

    colorWipe(strip.Color(255, 255, 255), 50); //White
    colorWipe(strip.Color(200, 200, 255), 50);
    colorWipe(strip.Color(155, 155, 255), 50);
    colorWipe(strip.Color(100, 100, 255), 50);
    colorWipe(strip.Color(55, 55, 255), 50);
    colorWipe(strip.Color(0, 0, 255), 50); // Blue
    colorWipe(strip.Color(0, 55, 200), 50);
    colorWipe(strip.Color(0, 100, 155), 50);
    colorWipe(strip.Color(0, 155, 100), 50);
    colorWipe(strip.Color(0, 200, 55), 50);
    colorWipe(strip.Color(0, 255, 0), 50); // Green
    colorWipe(strip.Color(55, 200, 0), 50);
    colorWipe(strip.Color(100, 155, 0), 50);
    colorWipe(strip.Color(155, 100, 0), 50);
    colorWipe(strip.Color(200, 55, 0), 50);
    colorWipe(strip.Color(255, 0, 0), 200); // Red
    colorWipe(strip.Color(50, 0, 0), 200);
    colorWipe(strip.Color(255, 0, 0), 200);
    colorWipe(strip.Color(50, 0, 0), 200);
    colorWipe(strip.Color(255, 0, 0), 200);
    colorWipe(strip.Color(50, 0, 0), 200);
    colorWipe(strip.Color(255, 0, 0), 200);

    Serial.println("  Fire!  ");
    digitalWrite(audioPin2, HIGH);
    delay(100);
    digitalWrite(audioPin2, LOW);
    
    digitalWrite(blasterLed, HIGH);
    delay(150);
    digitalWrite(blasterLed, LOW);
    irsend.sendSony(0x295, 20); //ir fire code
    delay(50);
    irsend.sendSony(0x295, 20); //ir fire code
    delay(50);
    
    colorWipe(strip.Color(0, 0, 0), 3000); // Off

    delay(100);
  }


  else
  { 
    digitalWrite(audioPin3, LOW);    
    knightRider(1, 1, 4, 0xFF1000); // Cycles, Speed, Width, RGB Color (original orange-red)
    clearStrip();
  }

} 



void colorWipe(uint32_t c, uint8_t wait)
{
  for(uint16_t i=0; i<strip.numPixels(); i++)
    strip.setPixelColor(i, c);
  strip.show();
  delay(wait);

}

//Subroutine for producing Knight Rider type sweeping lights
// Cycles - one cycle is scanning through all pixels left then right (or right then left)
// Speed - how fast one cycle is (32 with 16 pixels is default KnightRider speed)
// Width - how wide the trail effect is on the fading out LEDs. The original display used
// light bulbs, so they have a persistance when turning off. This creates a trail.
// Effective range is 2 - 8, 4 is default for 16 pixels. Play with this.
// Color - 32-bit packed RGB color value. All pixels will be this color.
// knightRider(cycles, speed, width, color);
void knightRider(uint16_t cycles, uint16_t speed, uint8_t width, uint32_t color) {
  uint32_t old_val[NUM_PIXELS]; // up to 256 lights!
  // Larson time baby!
  for(int i = 0; i < cycles; i++){
    for (int count = 0; count<NUM_PIXELS; count++) {
      strip.setPixelColor(count, color); 
      strip.show();
      delay(speed);
      old_val[count] = color;
      for(int x = count; x>0; x--) {
        old_val[x-1] = dimColor(old_val[x-1], width);
        strip.setPixelColor(x-1, old_val[x-1]); 
        strip.show();
      }
    }

  }
}

void clearStrip() {
  for( int i = 0; i<NUM_PIXELS; i++){
    strip.setPixelColor(i, 0x000000); 
    strip.show();
  }
}

uint32_t dimColor(uint32_t color, uint8_t width) {
  return (((color&0xFF0000)/width)&0xFF0000) + (((color&0x00FF00)/width)&0x00FF00) + (((color&0x0000FF)/width)&0x0000FF);
}

// Using a counter and for() loop, input a value 0 to 251 to get a color value.
// The colors transition like: red - org - ylw - grn - cyn - blue - vio - mag - back to red.
// Entering 255 will give you white, if you need it.
uint32_t colorWheel(byte WheelPos) {
  byte state = WheelPos / 21;
  switch(state) {
  case 0: 
    return strip.Color(255, 0, 255 - ((((WheelPos % 21) + 1) * 6) + 127)); 
    break;
  case 1: 
    return strip.Color(255, ((WheelPos % 21) + 1) * 6, 0); 
    break;
  case 2: 
    return strip.Color(255, (((WheelPos % 21) + 1) * 6) + 127, 0); 
    break;
  case 3: 
    return strip.Color(255 - (((WheelPos % 21) + 1) * 6), 255, 0); 
    break;
  case 4: 
    return strip.Color(255 - (((WheelPos % 21) + 1) * 6) + 127, 255, 0); 
    break;
  case 5: 
    return strip.Color(0, 255, ((WheelPos % 21) + 1) * 6); 
    break;
  case 6: 
    return strip.Color(0, 255, (((WheelPos % 21) + 1) * 6) + 127); 
    break;
  case 7: 
    return strip.Color(0, 255 - (((WheelPos % 21) + 1) * 6), 255); 
    break;
  case 8: 
    return strip.Color(0, 255 - ((((WheelPos % 21) + 1) * 6) + 127), 255); 
    break;
  case 9: 
    return strip.Color(((WheelPos % 21) + 1) * 6, 0, 255); 
    break;
  case 10: 
    return strip.Color((((WheelPos % 21) + 1) * 6) + 127, 0, 255); 
    break;
  case 11: 
    return strip.Color(255, 0, 255 - (((WheelPos % 21) + 1) * 6)); 
    break;
  default: 
    return strip.Color(0, 0, 0); 
    break;
  }
}

//Subroutine for playing tones

void playTone(int atone, int duration)

{ 

  for (long i = 0; i < duration * 1000L; i += atone * 2); 
  digitalWrite(speakerPin, HIGH);
  delayMicroseconds(atone);
  digitalWrite(speakerPin, LOW);
  delayMicroseconds(atone);

}

/* ( THE END ) */
